"""
Разработай систему управления учетными записями пользователей для небольшой компании.
Компания разделяет сотрудников на обычных работников и администраторов.
У каждого сотрудника есть уникальный идентификатор (ID), имя и уровень доступа.
Администраторы, помимо обычных данных пользователей, имеют дополнительный уровень
доступа и могут добавлять или удалять пользователя из системы.

Требования:
1.Класс `User*: Этот класс должен инкапсулировать данные о пользователе: ID,
имя и уровень доступа ('user' для обычных сотрудников).

2.Класс `Admin`: Этот класс должен наследоваться от класса `User`.
Добавь дополнительный атрибут уровня доступа, специфичный для администраторов ('admin').
Класс должен также содержать методы `add_user` и `remove_user`, которые позволяют добавлять
и удалять пользователей из списка (представь, что это просто список экземпляров `User`).

3.Инкапсуляция данных: Убедись, что атрибуты классов защищены от прямого доступа и
модификации снаружи. Предоставь доступ к необходимым атрибутам через методы
(например, get и set методы).
"""
import uuid


class User:

    def __init__(self, name, age):
        self.__name = name
        self.__age = age
        self._access_level = 0
        self._id = uuid.uuid4()

    def get_name(self):
        return self.__name

    def get_age(self):
        return self.__age

    def set_al(self, access_level):
        if access_level == 'admin':
            self._access_level = 1
        elif access_level == 'user':
            self._access_level = 0
        else:
            print('Неизвестый уровень добтупа. Допустимые аргументы метода:  admin, user')

    def print_name(self):
        print(f'Меня зовут {self.get_name()}. Мне {self.get_age()} лет.')


class Admin(User):

    def __init__(self, name, age):
        super().__init__(name, age)
        self._access_level = 1
        self._id = uuid.uuid4()

    def add_user(self, name, age):
        pass
